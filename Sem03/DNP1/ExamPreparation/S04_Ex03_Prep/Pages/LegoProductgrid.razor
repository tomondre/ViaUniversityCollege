@page "/themes/{CategoryName}/products"
@inject ILegoProductService ProductService
@inject IJSRuntime jsRuntime

@using S04_Ex03_Prep.Models
@using S04_Ex03_Prep.Data

<h3>LegoProductgrid</h3>

@if (products == null)
{
    <em>@status</em>
}
else
{
    <div class="container d-flex justify-content-center mt-50 mb-50">
        <div class="row">

            @foreach (LegoProduct product in products)
            {
                <div class="col-md-4 mt-2">
                    <div class="card">
                        <div class="card-body">
                            <div class="card-img-actions">
                                <img src="https://upload.wikimedia.org/wikipedia/commons/thumb/2/24/LEGO_logo.svg/1200px-LEGO_logo.svg.png" class="card-img img-fluid" width="96" height="350" alt="">
                            </div>
                        </div>
                        <div class="card-body bg-light text-center">
                            <div class="mb-2">
                                <h6 class="font-weight-semibold mb-2">
                                    <a href="#" class="text-default mb-2" data-abc="true">@product.Name</a>
                                </h6> 
                            </div>
                            <h3 class="mb-0 font-weight-semibold">@product.Price</h3>
                            <div class="text-muted mb-3">Rating: @product.Rating</div> 
                            <button type="button" @onclick="() => OpenLink(product.Link)" class="btn bg-cart"><i class="fa fa-cart-plus mr-2"></i>Show Item</button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
}



@code {

    [Parameter]
    public string CategoryName { get; set; }

    private string status = "Loading...";
    private IList<LegoProduct> products;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            products = await ProductService.GetAllProductsForTheme(CategoryName);
        }
        catch (Exception e)
        {
            status = e.Message;
        }
    }

    private void OpenLink(string link)
    {
        jsRuntime.InvokeAsync<object>("open", link, "_blank");
    }
}

<style>
    body {
        margin: 0;
        font-family: Roboto, -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, "Helvetica Neue", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji";
        font-size: .8125rem;
        font-weight: 400;
        line-height: 1.5385;
        color: #333;
        text-align: left;
    }
    
    .mt-50 {
        margin-top: 50px
    }
    
    .mb-50 {
        margin-bottom: 50px
    }
    
    .card {
        position: relative;
        display: -ms-flexbox;
        display: flex;
        -ms-flex-direction: column;
        flex-direction: column;
        min-width: 0;
        word-wrap: break-word;
        background-color: grey;
        background-clip: border-box;
        border: 1px solid rgba(0, 0, 0, .125);
        border-radius: .1875rem
    }
    
    .card-img-actions {
        position: relative
    }
    
    .card-body {
        -ms-flex: 1 1 auto;
        flex: 1 1 auto;
        padding: 1.25rem;
        text-align: center
    }
    
    .card-img {
        width: 350px
    }
    
    .star {
        color: red
    }
    
    .bg-cart {
        background-color: orange;
        color: #fff
    }
    
    .bg-cart:hover {
        color: #fff
    }
    
    .bg-buy {
        background-color: green;
        color: #fff;
        padding-right: 29px
    }
    
    .bg-buy:hover {
        color: #fff
    }
    
    a {
        text-decoration: none !important
    }
   
</style>